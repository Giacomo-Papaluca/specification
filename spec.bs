<pre class="metadata">
Title: Shape Trees Specification
Shortname: shapetrees-spec
Level: 1
Max ToC Depth: 2
Status: w3c/ED
Group: w3c
URL: https://shapetrees.org/spec
Editor: Eric Prud'hommeaux
Editor: Justin Bingham
Editor: Josh Collins
Markup Shorthands: markdown yes
Abstract:
    Semantic Web Applications interoperate by sharing semantics of terms and constellations of data structures.
    This specification defines shape trees, a mechanism for declaring and operating over constellations of data structures.
</pre>

<!-- For bikeshed style overrides -->
<style>
	code.container {
		color: #005555;
	}

	code.notes {
		color: #770033;
	}

	code.citation {
		color: #330077;
	}

	code.image {
		color: #337700;
	}
</style>

Introduction {#introduction}
=====================
A shape tree defines a tree of related resources which combine to enable some task.
The shape tree associates each resource with a shape in a schema.
This document defines the structure and use of shape trees for [[[LDP]]] [[LDP]] Resources.

A shape tree is expressed as an RDF graph structure and the behaviors of agents respecting that graph structure.
These semantics can be implemented by a server, a client-side library, or a privilenged third-party helper application.
Communication, including error reporting, is defined in terms of HTTP; allowing a single definition to define the behaviors for servers, clients and third-party applications.

Structure {#structure}
=====================
A <dfn>shape tree</dfn> is a machine-readable template describing the expected layout of a tree of LDP Resources in a Pod.
A shape tree links to other shape trees to form a resource hierarchy captured by <code>tree:contains</code> links:

<figure>
	<pre highlight="turtle">
	&lt;#ShapeTree&gt; {
	  (
	    a [tree:ShapeTreeContainer] ;
	    (rdfs:label xsd:string | tree:matchesUriTemplate xsd:string) ;
	    tree:contains @&lt;#ShapeTree&gt; +
	  |
	    a [tree:ShapeTreeResource tree:ShapeTreeNonRDFResource] ;
	    tree:matchesUriTemplate xsd:string
	  ) ;
	  tree:references @&lt;#ReferencedShapeTree&gt; * ;
	  tree:validatedBy IRI ? ;
	}

	&lt;#ReferencedShapeTree&gt; {
	  tree:hasShapeTree IRI ;
	  tree:traverseViaShapePath xsd:string
	}	
	</pre>
</figure>

The <code>tree:contains</code> property MUST NOT introduce any cycles into the RDF graph.

The realization of a <a>shape tree</a> is an <dfn>instance tree</dfn>.
The the upper-most Container of that tree is an <dfn>instance root</dfn>.
Let <code>ST</code> be a <a>shape tree</a>; let <code>T</code> be a corresponding <a>instance tree</a>.
For any shape tree <code>S</code> linked in <code>ST</code>:

* The tree:expectsType arc identifies the type of a corresponding resource <code>R</code> in <code>T</code>.
* An { <code>S</code> <code>rdfs:label</code> <code>L</code> } arc indicates that there is exactly one corresponding Resource <code>R</code> and it has the name <code>L</code>.
* An { <code>S</code> <code>tree:matchesUriTemplate</code> <code>L</code> } arc indicates that there are an arbitrary number of corresponding resources <code>R</code> and each will have a name that matches the URI template [[RFC6570]] <code>L</code>.
* An { <code>S</code> <code>tree:validatedBy</code> <code>Sh</code> } arc indicates that <code>R</code> must have exactly one node which conforms to shape <code>Sh</code>.
* Any { <code>S</code> <code>tree:contains</code> <code>S2</code> } arcs indicate there is a nested shape tree and corresponding nested resource <code>R2</code>.

A { <code>tree:hasShapeTreeDecoratorIndex</code> <code>Si</code> } arc indicates the location of an index of SKOS hierarchies that describe <code>ST</code> 

Terms {#terms}
=====================
The following types and functions are used throughout this specification:

* Types:
	* <dfn>Container</dfn> -- a [[[LDP]]] [[LDP]] Container.
	* <dfn>Managed Container</dfn> -- any LDP Container in a <a>Planted shape tree</a>. A Managed Container may be an <a>Instance Root</a> or hierarchically nested within the resource hierarchy.
	* <dfn>Unmanaged Container</dfn> -- any LDP Container which is not described by a shape tree
	* <dfn>Supported RDF Format</dfn> -- a textual representation of an RDF graph in a format that can be accurately and losslessly parsed to that RDF graph.
	* <dfn>Body Graph</dfn> -- the RDF graph derived from parsing the body of an HTTP request with a parser determined by the Content-type: header of that HTTP request.
	* <dfn>Static Container</dfn> -- an LDP Container which is implied by the existence of the parent resource, denoted by a rdfs:label predicate.
	* <dfn>Resource Graph</dfn> -- an RDF graph obtained by parsing the body of a GET on an LDP Resource.
	* <dfn>SKOS Graph</dfn> -- an RDF graph conforming to [[[skos-reference]]] [[skos-reference]] data model
* Functions:
	* Make <code>contents</code> available by GET request to <code>resource</code>.
	* Let <code>parent</code> be the result of resolving the relative URL <code>..</code> against <code>resource</code>.
      Add the triple {<code>parent</code> ldp:contains <code>resource</code>} to <code>parent</code>.

Planting a Shape Tree {#planting}
=====================
Creating a new shape tree container starts with a POST P to a Regular Container <code>parent</code> to establish the shape tree <a>Instance Root</a> with a request body Content-type of some supported RDF Format and one or more Link header with a rel="http://shapetrees.org/#ShapeTree".
The <a>Instance Root</a> and <b>nested Static Containers</b> are created by applying <a>instantiate static</a>(<code>F</code>, ".")

Navigating Planted Shape Trees {#navigating}
=====================
The shape tree describes data instances which are resource hierarchies in an LDP Container hierarchy.
Every Managed Container has metadata that expresses "where" that managed container is located in reference to the Instance Root of the planted shape tree:

* <b>Shape tree Instantiation Root</b> &mdash; the IRI of the container that represents the planted shape tree.
* <b>Shape tree Instantiation Path</b> &mdash; a relative IRI identifying a location within a shape tree instance. This is represented in RDF as a string literal.
* <b>Root shape tree</b> &mdash; the IRI of the planted shape tree's subject.
* <b>Current shape tree</b> &mdash; a location within a shape tree identified by the IRI of the subject node of that shape tree in the shape tree hierarchy.

<dfn>instantiate static</dfn> (<code>shapeTreeInstantiationShapeTree</code>, <code>shapeTreeS</code>) instantiates the Static Containers implied by shapeTreeInstantiationShapeTree <a class="excode" href="https://github.com/shapetrees/specification/blob/master/util/shapetree.js#L309-L331"></a>

1. instantiate a <b>shape tree instance</b> &mdash; an LDP Container with a Resource Graph conformant to <span class="hljs-name">&lt;#ShapeTreeInstanceStep&gt;</span> below:

<figure>
	<pre highlight="shexc">
	&lt;#ShapeTreeInstance&gt; {
	  a [tree:ShapeTreeLocator] ;
	  tree:shapeTreeRoot IRI;
	  tree:shapeTreeInstancePath xsd:string;
	  tree:shapeTreeInstanceRoot IRI;
	  tree:hasShapeTree IRI;
	}
	</pre>
</figure>

1. for each <code>child shape tree</code> in { <code>shapeTreeInstantiationShapeTree</code>, tree:contains, * }
	* if <code>child shape tree</code> has an rdfs:label <code>container label</code>
		* apply <a>instantiate static</a>(<code>child shape tree</code>, path.join(<code>shapeTree</code>, <code>container label</code>))

Creating Data Instances {#data-instance}
=====================
For any POST, PUT, PATCH <code>P</code> to any Managed Container <code>parent</code>:

1. If <code>P</code> does not have a Link: header with rel="focusNode" and href=<code>H</code>, the request is rejected with a status code of 400.
1. Let <code>N</code> be <code>H</code> resolved against he base of parent's URL overloaded by any BASE or PREFIXes defined in the Resource Body.
1. Let <code>RG</code> be the container's Resource Graph.
1. Let <code>IR</code> be the Shape Tree Instantiation Root.
1. Let <code>IP</code> be the Shape Tree Instantiation Path.
1. Let <code>IS</code> be the Shape Tree Instantiation Step found by following IP through the shape tree hierarchy.
1. Let <code>S</code> be the the tree:validatedBy included in IS.
1. Let <code>R</code> be the results of validating the ShapeMap <code>N@S</code>.
1. If <code>R</code> is an error, the request is rejected with a status code of 422 (Unprocessable Entity).
1. Otherwise the Pod creates a new entity <code>Name</code>, where name may have been influenced by the Slug: header:
	* If <code>P</code> has a Link: header with rel="type" and href=ldp:Container,
		* <b>nested Static Containers</b> are created by applying <a>instantiate static</a>(<code>F</code>, <code>IP</code> + "/" + <code>Name</code>))
	* The request is processed according to POST/PUT/PATCH to an [[!LDP]] Container.	

Describing Shape Trees {#describing}
=====================
External graphs adhering to the SKOS data model can be optionally used to describe the shape tree in human-readable terms.

Specifying a <code>tree:hasShapeTreeDecoratorIndex</code> predicate within shape tree definition enables clients to discover available human-readable definitions of that shape tree.
